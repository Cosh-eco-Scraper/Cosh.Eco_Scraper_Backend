{
  "swagger": "2.0",
  "info": {
    "title": "Cosh scraper API",
    "description": "This will display all api calls to the cosh scraper backend",
    "version": "1.0.0"
  },
  "host": "localhost:3001",
  "basePath": "/api",
  "schemes": ["http"],
  "paths": {
    "/stores": {
      "get": {
        "tags": ["stores"],
        "summary": "Returns all stores",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": ["stores"],
        "summary": "Create a complete store",
        "description": "Creates a new store with the provided name and URL.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Details of the store to create",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "example": "https://example.com"
                },
                "location": {
                  "type": "string",
                  "example": "Kasteelstraat 1, 3000 Leuven, BegiÃ«"
                }
              },
              "required": ["name", "url", "location"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Store created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Store created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing parameters.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Name and URL are required"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An unexpected error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "tags": ["stores"],
        "summary": "Returns a single store by ID",
        "description": "Retrieves detailed information about a specific store.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the store to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Store found and returned",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": "1"
                },
                "name": {
                  "type": "string",
                  "example": "a beautiful store"
                },
                "description": {
                  "type": "string",
                  "example": "description of the store"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Store not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["stores"],
        "summary": "Update a store by ID",
        "description": "Updates the details of a store specified by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the store to update",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Store update payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Updated Store Name"
                },
                "description": {
                  "type": "string",
                  "example": "Updated description"
                },
                "location_id": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Store not found."
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/stores/{id}/openingshours": {
      "get": {
        "tags": ["stores"],
        "summary": "Returns all opening hours for a single store by ID",
        "description": "Retrieves opening hours for a specific store.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the store to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Store found and returned",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": "1"
                },
                "day": {
                  "type": "string",
                  "example": "monday"
                },
                "opening": {
                  "type": "string",
                  "example": "09:00h"
                },
                "closing": {
                  "type": "string",
                  "example": "17:30h"
                },
                "storeId": {
                  "type": "number",
                  "example": "1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Store not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stores/{id}/brands": {
      "get": {
        "tags": ["stores"],
        "summary": "Returns all brands for a single store by ID",
        "description": "Retrieves brands for a specific store.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the store to return"
          }
        ],
        "responses": {
          "200": {
            "description": "brand found and returned",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": "1"
                },
                "name": {
                  "type": "string",
                  "example": "Jack & Jones"
                }
              }
            }
          },
          "204": {
            "description": "No brands found"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Store not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stores/{id}/types": {
      "get": {
        "tags": ["stores"],
        "summary": "Returns the storeTypes for a single store by ID",
        "description": "Retrieves the type for a specific store.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the store to return"
          }
        ],
        "responses": {
          "200": {
            "description": "storeType found and returned",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": "1"
                },
                "name": {
                  "type": "string",
                  "example": "Fashion"
                },
                "description": {
                  "type": "string",
                  "example": "Fashion store type"
                }
              }
            }
          },
          "204": {
            "description": "No storetype found"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Store not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/llm": {
      "post": {
        "tags": ["llm"],
        "summary": "Send a prompt to the LLM and get a response.",
        "description": "Sends a prompt string to the LLM and returns the generated response.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Prompt payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "prompt": {
                  "type": "string",
                  "example": "Hello, AI!"
                }
              },
              "required": ["prompt"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response from LLM.",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "type": "string",
                  "example": "Hello, human!"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/brands/": {
      "get": {
        "tags": ["brands"],
        "summary": "get all brands",
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/brands/{brandId}": {
      "put": {
        "tags": ["brands"],
        "summary": "Update a brand by ID",
        "description": "Updates the details of a brand specified by brandId.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of the brand to update",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Brand update payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "BrandName"
                },
                "label": {
                  "type": "string",
                  "example": "BR"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found."
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/locations/{id}": {
      "put": {
        "tags": ["locations"],
        "summary": "Update a location by ID",
        "description": "Updates the details of a location specified by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the location to update",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Location update payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "Main Street"
                },
                "number": {
                  "type": "string",
                  "example": "123A"
                },
                "postalCode": {
                  "type": "string",
                  "example": "12345"
                },
                "city": {
                  "type": "string",
                  "example": "Amsterdam"
                },
                "country": {
                  "type": "string",
                  "example": "Netherlands"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Location not found."
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/storebrands": {
      "post": {
        "tags": ["storebrands"],
        "summary": "Add a brand to a store",
        "description": "Associates a brand with a specific store.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Store ID and Brand ID to associate",
            "schema": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "integer",
                  "example": 1,
                  "description": "Store ID"
                },
                "brandId": {
                  "type": "integer",
                  "example": 5,
                  "description": "Brand ID"
                }
              },
              "required": ["id", "brandId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Brand successfully added to the store",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/openinghours/{id}": {
      "put": {
        "tags": ["openinghours"],
        "summary": "Update opening hours by ID",
        "description": "Updates the details of an opening hours entry specified by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the opening hours entry to update",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Opening hours update payload",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "day": {
                  "type": "string",
                  "example": "monday"
                },
                "openingAt": {
                  "type": "string",
                  "example": "09:00h"
                },
                "closingAt": {
                  "type": "string",
                  "example": "17:30h"
                },
                "storeId": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opening hours updated successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "description": "Opening hours entry not found."
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/statements/{id}": {
      "get": {
        "tags": ["Statements"],
        "summary": "Get a statement by ID",
        "description": "Fetches a specific statement by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The ID of the statement to fetch"
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "The requested statement",
            "schema": {
              "$ref": "#/definitions/Statement"
            }
          },
          "404": {
            "description": "Statement not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/statements": {
      "get": {
        "tags": ["Statements"],
        "summary": "Get all statements",
        "description": "Fetches all statements from the database.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "A list of all statements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Statement"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/types": {
      "get": {
        "tags": ["Types"],
        "description": "Get all types",
        "responses": {
          "200": {
            "description": "This will return if all types are found"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/storeTypes": {
      "post": {
        "tags": ["Store Types"],
        "description": "connect store and type",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The type and store you want to connect",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "number",
                  "example": "1"
                },
                "typeId": {
                  "type": "number",
                  "example": "1"
                }
              },
              "required": ["typeId", "storeId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This will return if all types are found"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Store Types"],
        "description": "remove a storeType",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The type and store you want to remove",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "number",
                  "example": "1"
                },
                "typeId": {
                  "type": "number",
                  "example": "1"
                }
              },
              "required": ["typeId", "storeId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This will return if all types are found"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Statement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "text": {
          "type": "string",
          "example": "This is a sample statement."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-10-01T12:00:00Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "example": "2023-10-02T12:00:00Z"
        }
      }
    }
  }
}
